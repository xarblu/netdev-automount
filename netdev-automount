#!/usr/bin/env python3

import sys
import os
import re
import subprocess
import tomllib
from time import sleep
import concurrent.futures

'''
Automatically (un)mount network filesystems

Uses mounts configured in /etc/fstab.

If called directly check which hosts are reachable via ping.

If called while residing in /{etc,usr/lib}/NetworkManager/dispatcher.d
assume it is called as a dispatcher event.

To use this feature configure hosts associated with connections in
/etc/nm-netdev-automount.toml.

<connection> is either UUID or NAME of the connection as given by "nmcli connection show".
The first match will be used and UUID is preferred.

Hosts are as configured in fstab.

# [<connection>]  
# hosts = [ 'host_1', 'host_2', 'host_3' ]
'''

# parse /etc/fstab for netmounts
# @return - list of tuples containing (host, mountpoint)
def parse_fstab() -> list[tuple[str,str]]:
    shares = list[tuple[str,str]]()
    with open('/etc/fstab') as fstab:
        for line in fstab:
            # skip comments
            if re.match(r'\s*#.*', line):
                continue
            # skip non network mounts 
            # (assuming netshares are <host>:<share> <mountopts>)
            if not re.match(r'.*?:.*?(?:\s+.*?){5}', line):
                continue
            host = re.sub(r'\s*(.*?):.*?\s+.*', r'\1', line.rstrip())
            mountpoint = re.sub(r'\s*.*?\s+(.*?)\s+.*', r'\1', line.rstrip())
            shares.append((host, mountpoint))
    return shares

# check if host is reachable
# retry 'tries' times waiting 3s between tries
# @param host - host to check
# @param tries - try check n times (default 1)
# @return - True if reachable, else False
def reachable(host: str, tries: int = 1) -> bool:
    for t in range(tries):
        if t > 0:
            sleep(3)
        try:
            # resolve host outide of ping because ping's resolver is slow
            getent = subprocess.run(['getent', 'hosts', host], capture_output=True, text=True, timeout=5)
            if getent.returncode != 0:
                continue
            ip = getent.stdout.split(' ')[0]
            ping = subprocess.run(['ping', '-c1', ip], capture_output=True, timeout=5)
            if ping.returncode == 0:
                return True
            else:
                continue
        except subprocess.TimeoutExpired:
            continue
    else:
        return False

# check if mountpoint is mounted
# assume timeout means unreachable zombie netmount
# @param mountpoint - path to a local mountpoint
# @return - True if mountpoint mounted or timeout, else False
def mounted(mountpoint: str) -> bool:
    try:
        p = subprocess.run(['mountpoint', mountpoint], capture_output=True, timeout=5)
        return p.returncode == 0
    except subprocess.TimeoutExpired:
        return True

# mount <netmounts>
# @param netmount - tuple of (host, mount)
# @param check_reachable - None disables check, int retries check n times (default disable)
def mount(netmount: tuple[str,str], check_reachable: None|int) -> None:
    host,mount = netmount
    if mounted(mount):
        print(f'{mount} already mounted')
        return
    if check_reachable and not reachable(host, check_reachable):
        print(f'{host} unreachable - not mounting')
        return
    try:
        p = subprocess.run(['mount', mount], capture_output=True, timeout=5)
        if p.returncode == 0:
            print(f'Successfully mounted {mount} from {host}')
        else:
            print(f'Failed mounting {mount} from {host} - mount failed')
    except subprocess.TimeoutExpired:
        print(f'Failed mounting {mount} from {host} - timeout reached')

# unmount <netmounts>
# @param netmount - tuple of (host, mount)
# @param check_reachable - None disables check, int retries check n times (default disable)
def unmount(netmount: tuple[str,str], check_reachable: None|int) -> None:
    host,mount = netmount
    if not mounted(mount):
        print(f'{mount} already unmounted')
        return
    if check_reachable and reachable(host, check_reachable):
        print(f'{host} reachable - not unmounting')
        return
    # try to unmount clean first
    for args in [(), ('-f'), ('-l', '-f')]:
        try:
            p = subprocess.run(['umount', *args, mount], capture_output=True, timeout=5)
            if p.returncode == 0:
                print(f'Successfully unmounted {mount} from {host} with args {args}')
                return
            else:
                print(f'Failed unmounting {mount} from {host} with args {args} - umount failed')
        except subprocess.TimeoutExpired:
            print(f'Failed unmounting {mount} from {host} with args {args} - timeout reached')

# start parallel mountjobs
# @param action - one of mount or unmount
# @param netmounts - list of (host, mountpoint) tuples
# @param check_reachable - None disables check, int retries check n times (default disable)
def mounter(action: str, netmounts: list[tuple[str,str]], check_reachable: None|int = None) -> None:
    if action not in ['mount', 'unmount']:
        raise ValueError("action should be one of [mount, unmount]")
    mountjobs = concurrent.futures.ThreadPoolExecutor()
    for netmount in netmounts:
        if action == 'mount':
            mountjobs.submit(mount, netmount, check_reachable)
        elif action == 'unmount':
            mountjobs.submit(unmount, netmount, check_reachable)
    mountjobs.shutdown(wait=True)

# check if NetworkManager-dispatcher
# @return - True if ran from a valid NetworkManager/dispatcher.d, else False
def nm_dispatcher() -> bool:
    if re.match(r'/(?:etc|usr/lib)/NetworkManager/dispatcher.d/.*', os.path.abspath(__file__)):
        return True
    else:
        return False

# parse configured hosts from /etc/nm-netdev-automount.tomle
# @return - list of hosts associated with NetworkManager <connection>
def nm_dispatcher_hosts(connection: str) -> list[str] | None:
    config_path = '/etc/nm-netdev-automount.toml'
    with open(config_path, 'rb') as f:
        config = tomllib.load(f)
        if connection in config and 'hosts' in config[connection]:
            if len(config[connection]['hosts']) > 0:
                return config[connection]['hosts']
            else:
                print(f'No hosts configured for connection {connection}')
                return None
        else:
            print(f'Connection {connection} is not configured in {config_path}')
            return None

# Events when running as NetworkManager dispatcher script
def nm_dispatcher_events():
    hosts = None
    for connection in [os.environ.get('CONNECTION_UUID'), os.environ.get('CONNECTION_ID')]:
        if connection:
            hosts = nm_dispatcher_hosts(connection)
            if hosts:
                break
    else:
        exit()
    
    # act based on dispatched event
    if sys.argv[2] in ['up', 'vpn-up']:
        # mount valid hosts and allow 5 retries for checking reachability
        mounter('mount', [x for x in parse_fstab() if x[0] in hosts], check_reachable=5)
    elif sys.argv[2] in ['pre-down', 'down', 'vpn-pre-down', 'vpn-down']:
        # unmount valid hosts without checking reachability
        mounter('unmount', [x for x in parse_fstab() if x[0] in hosts], check_reachable=None)
    exit()

# Events when running directly
def direct():
    # (un)mount hosts, only check reachability once
    mounter('mount', [x for x in parse_fstab()], check_reachable=1)
    mounter('unmount', [x for x in parse_fstab()], check_reachable=1)
    exit()

# create default conf if it doesn't exist
def init():
    conf_path = '/etc/nm-netdev-automount.toml'
    if not os.path.isfile(conf_path):
        conf_default = """# Automatically (un)mount network filesystems via NetworkManager-dispatcher

# Uses mounts configured in /etc/fstab.

# <connection> is either UUID or NAME of the connection as given by "nmcli connection show".
# The first match will be used and UUID is preferred.

# Hosts are as configured in fstab.

# [<connection>]  
# hosts = [ 'host_1', 'host_2', 'host_3' ]
"""
        with open(conf_path, 'w') as conf:
            conf.write(conf_default)

def main():
    init()
    if nm_dispatcher():
        nm_dispatcher_events()
    else:
        direct()

if __name__ == '__main__':
    main()
