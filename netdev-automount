#!/usr/bin/env python3

import sys,os,re,subprocess,tomllib,time

'''
Automatically (un)mount network filesystems

Uses mounts configured in /etc/fstab.

If called directly check which hosts are reachable via ping.

If called while residing in /{etc,usr/lib}/NetworkManager/dispatcher.d
assume it is called as a dispatcher event.

To use this feature configure hosts associated with connections in
/etc/nm-netdev-automount.toml.

<connection> is either UUID or NAME of the connection as given by "nmcli connection show".
The first match will be used and UUID is preferred.

Hosts are as configured in fstab.

# [<connection>]  
# hosts = [ 'host_1', 'host_2', 'host_3' ]
'''

# returns a list of tuples containing (host, mountpoint)
def parse_fstab() -> list[tuple[str,str]]:
    shares = list[tuple[str,str]]()
    with open('/etc/fstab') as fstab:
        for line in fstab:
            # skip comments
            if re.match(r'\s*#.*', line):
                continue
            # skip non network mounts 
            # (assuming netshares are <host>:<share> <mountopts>)
            if not re.match(r'.*?:.*?(?:\s+.*?){5}', line):
                continue
            host = re.sub(r'\s*(.*?):.*?\s+.*', r'\1', line.rstrip())
            mountpoint = re.sub(r'\s*.*?\s+(.*?)\s+.*', r'\1', line.rstrip())
            shares.append((host, mountpoint))
    return shares

# returns True if host is reachable
def reachable(host: str) -> bool:
    # resolve host outide of ping because ping's resolver is slow
    getent = subprocess.run(['getent', 'hosts', host], capture_output=True, text=True)
    if getent.returncode != 0:
        return False
    ip = getent.stdout.split(' ')[0]
    ping = subprocess.run(['ping', '-c1', ip], capture_output=True)
    if ping.returncode == 0:
        return True
    else:
        return False

# get default gateway(ipv4)/next hop(ipv6) for iface
# either returns ip if found or None
def gateway(iface: str) -> str|None:
    for ipv in ['6', '4']:
        route = subprocess.run(['route', '-n', f'-{ipv}'], capture_output=True, text=True)
        if route.returncode != 0:
            return None
        for line in route.stdout.splitlines():
            route = re.split(r'\s+', line)
            if iface in route and 'UG' in route:
                return route[1]

# returns True if mountpoint already has a FS mounted
# if it doesn't finish within 3 seconds assume it's
# a mounted but disconnected zombie netmount
def mounted(mountpoint: str) -> bool:
    p = subprocess.run(['timeout', '3', 'mountpoint', mountpoint], capture_output=True)
    # 124 -> timeout
    return p.returncode == 0 or p.returncode == 124

# mount <netmounts> if reachable
def mount(netmounts: list[tuple[str,str]]):
    for host,mount in netmounts:
        if mounted(mount):
            print(f'{mount} already mounted')
            return
        p = subprocess.run(['mount', mount], capture_output=True)
        if p.returncode == 0:
            print(f'Successfully mounted {mount} from {host}')
        else:
            print(f'Failed mounting {mount} from {host}')

# unmount <netmounts> if unreachable
def umount(netmounts: list[tuple[str,str]]):
    for host,mount in netmounts:
        if not mounted(mount):
            print(f'{mount} already unmounted')
            return
        # try to unmount clean first
        for args in [' ', '-f', '-lf']:
            p = subprocess.run(['timeout', '3', 'umount', args, mount], capture_output=True)
            if p.returncode == 0:
                print(f'Successfully unmounted {mount} from {host} with args {args}')
                return
            else:
                print(f'Failed unmounting {mount} from {host} with args {args}')

# returns True if ran from a valid NetworkManager/dispatcher.d
def nm_dispatcher() -> bool:
    if re.match(r'/(?:etc|usr/lib)/NetworkManager/dispatcher.d/.*', os.path.abspath(__file__)):
        return True
    else:
        return False

# returns list of hosts associated with NetworkManager <connection>
def nm_dispatcher_hosts(connection: str) -> list[str] | None:
    config_path = '/etc/nm-netdev-automount.toml'
    with open(config_path, 'rb') as f:
        config = tomllib.load(f)
        if connection in config and 'hosts' in config[connection]:
            if len(config[connection]['hosts']) > 0:
                return config[connection]['hosts']
            else:
                print(f'No hosts configured for connection {connection}')
                return None
        else:
            print(f'Connection {connection} is not configured in {config_path}')
            return None

# Events when running as NetworkManager dispatcher script
def nm_dispatcher_events():
    hosts = None
    for connection in [os.environ.get('CONNECTION_UUID'), os.environ.get('CONNECTION_ID')]:
        if connection:
            hosts = nm_dispatcher_hosts(connection)
            if hosts:
                break
    else:
        exit()
    
    # mount based on dispatched event
    # wait until the default gateway for interface is available
    # then retry 5 times with 3s delay
    if sys.argv[2] in ['up', 'vpn-up']:
        while not gateway(sys.argv[1]) and not reachable(str(gateway(sys.argv[1]))): time.sleep(1)
        for i in range(5):
            mount([ x for x in parse_fstab() if x[0] in hosts and reachable(x[0]) ])
            time.sleep(3)
    elif sys.argv[2] in ['pre-down', 'down', 'vpn-pre-down', 'vpn-down']:
        umount([ x for x in parse_fstab() if x[0] in hosts ])
    exit()

# Events when running directly
def direct():
    mount([ x for x in parse_fstab() if reachable(x[0]) ])
    umount([ x for x in parse_fstab() if not reachable(x[0]) ])
    exit()

# create default conf if it doesn't exist
def init():
    conf_path = '/etc/nm-netdev-automount.toml'
    if not os.path.isfile(conf_path):
        conf_default = """# Automatically (un)mount network filesystems via NetworkManager-dispatcher

# Uses mounts configured in /etc/fstab.

# <connection> is either UUID or NAME of the connection as given by "nmcli connection show".
# The first match will be used and UUID is preferred.

# Hosts are as configured in fstab.

# [<connection>]  
# hosts = [ 'host_1', 'host_2', 'host_3' ]
"""
        with open(conf_path, 'w') as conf:
            conf.write(conf_default)

def main():
    init()
    if nm_dispatcher():
        nm_dispatcher_events()
    else:
        direct()

if __name__ == '__main__':
    main()
